# Пусть у нас есть вот такие данные - список таплов.
# В моей голове это точки, поля каждой это (x, y, color).
a = [(1,2,'red'), (1,0,'blue'), (3,5,'red')]

# Если я хочу отсортировать точки по x, это можно сделать примерно так
print(sorted(a, key = lambda e: e[0]))

# Если хочу сортировку по двум критериям сразу, то так тоже можно.
# Например, хочу сортировку сперва по X, потом по Y.
# В этот момент оказывается, что ключ для сортировки - тапл на самом деле.
print(sorted(a, key = lambda e: (e[0], e[1])))

"""
Ещё тут стоит сказать, что key не требует строго лямбду, на самом деле.
Там ожидается функция, которая для элемента вернёт ключ.
Просто часто проще всего в роли этой функции сразу на месте лямбду и написать.
Но именованные функции использовать тоже можно.
"""

# Функция, на вход принимает очередной элемент (тапл),
# распаковывает его (потому что может), в роли ключа возвращает цвет
def color_of_point(p):
    x,y,color = p
    return color

# Примерно аналогично, только ключ не равен какому-то полю, а вычисляется
def vector_square_length(p):
    x,y,color = p
    return x**2 + y**2

# А теперь в роли ключа вернём тапл, собрав его вызовами прошлых функций
def two_param(p):
    return color_of_point(p), -vector_square_length(p)

# Сортировка по цвету
print(sorted(a, key = color_of_point))

# Сортировка по удалённости от координат
print(sorted(a, key = vector_square_length))

# Творческая сортировка по паре параметров
print(sorted(a, key = two_param))
