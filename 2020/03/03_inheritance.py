# Наследование в Python-е, очевидно, есть


# Это базовый класс
class A:
    def __init__(self, v=42):
        self.a = v

# А это унаследованный от него
class B(A):
    # Допустим, наследник хочет свой __init__
    def __init__(self):
        # Тогда на его совести вызвать __init__ родителя,
        # иначе логика инита базового класса не выполнится
        super().__init__(1)
        # Дальше можно свой дополнительный инит писать
        self.b = -1


# Создадим базовый класс, посмотрим на поля
a = A()
print(a.a)

# Аналогично посмотрим на унаследованный
b = B()
print(b.a)

# Ещё сразу посмотрим на логику того, кто кем является при выполнении кода
print(isinstance(a, A))
print(isinstance(a, B))
print(isinstance(b, A))
print(isinstance(b, B))


"""
Множественное наследование тоже есть. Но оставим его за рамками.
Оно правда редко нужно. Сама концепция та же, что в прошлом году. Потребуется - детали реализации прочитаете.
"""
