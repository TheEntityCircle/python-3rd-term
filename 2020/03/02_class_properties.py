# У этого класса будут поля
class TestClass:

    # Это поле класса. Примерно как static-поле в C++, хотя и не совсем.
    foo = 42

    # Это конструктор с параметрами
    def __init__(self, a, b):
        # Возникают ещё два поля класса, теперь уже личные для данного экземпляра.
        # Правило хорошего тона - все поля должны возникнуть внутри __init__-а.
        # Хотя технически ничто не мешает создать новые поля внутри других методов.
        self.bar = a
        self.baz = b

        # Так тоже можно писать. Это снова таплы, да.
        #self.bar, self.baz = a, b


# Создадим пару экземпляров класса
a = TestClass(1, 2)
b = TestClass(3, 4)

print("=== Initial values ===")
# Распечатаем, посмотрим и на поле класса, и на поля экземпляров
for c in [a, b]:
    print(c.foo, c.bar, c.baz)

# Поменяем поле класса
TestClass.foo = 24
# И поля одного из экземпляров тоже
a.bar = -1
a.baz = -2

print("=== Updated values ===")
# Снова на них посмотрим
for c in [a, b]:
    print(c.foo, c.bar, c.baz)

# Попробуем ещё раз поменять "квазистатическое" поле и ещё раз посмотреть на все значения
a.foo = 88
print("=== Surprise ===")
for c in [a, b]:
    print(c.foo, c.bar, c.baz)


"""
Интуитивно очевидно, что в полях класса может быть что угодно - в том числе массивы, другие классы и т.д.
Так вот, интуиция в этот раз не подвела. И правда может.
"""
